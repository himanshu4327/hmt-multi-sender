// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Multisent extends ethereum.Event {
  get params(): Multisent__Params {
    return new Multisent__Params(this);
  }
}

export class Multisent__Params {
  _event: Multisent;

  constructor(event: Multisent) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get total(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class HMTMULTISENDER extends ethereum.SmartContract {
  static bind(address: Address): HMTMULTISENDER {
    return new HMTMULTISENDER("HMTMULTISENDER", address);
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class MultisendEtherCall extends ethereum.Call {
  get inputs(): MultisendEtherCall__Inputs {
    return new MultisendEtherCall__Inputs(this);
  }

  get outputs(): MultisendEtherCall__Outputs {
    return new MultisendEtherCall__Outputs(this);
  }
}

export class MultisendEtherCall__Inputs {
  _call: MultisendEtherCall;

  constructor(call: MultisendEtherCall) {
    this._call = call;
  }

  get targets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class MultisendEtherCall__Outputs {
  _call: MultisendEtherCall;

  constructor(call: MultisendEtherCall) {
    this._call = call;
  }
}

export class MultisendTokenCall extends ethereum.Call {
  get inputs(): MultisendTokenCall__Inputs {
    return new MultisendTokenCall__Inputs(this);
  }

  get outputs(): MultisendTokenCall__Outputs {
    return new MultisendTokenCall__Outputs(this);
  }
}

export class MultisendTokenCall__Inputs {
  _call: MultisendTokenCall;

  constructor(call: MultisendTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ensureExactAmount(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get targets(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class MultisendTokenCall__Outputs {
  _call: MultisendTokenCall;

  constructor(call: MultisendTokenCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawWronglySentEtherCall extends ethereum.Call {
  get inputs(): WithdrawWronglySentEtherCall__Inputs {
    return new WithdrawWronglySentEtherCall__Inputs(this);
  }

  get outputs(): WithdrawWronglySentEtherCall__Outputs {
    return new WithdrawWronglySentEtherCall__Outputs(this);
  }
}

export class WithdrawWronglySentEtherCall__Inputs {
  _call: WithdrawWronglySentEtherCall;

  constructor(call: WithdrawWronglySentEtherCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawWronglySentEtherCall__Outputs {
  _call: WithdrawWronglySentEtherCall;

  constructor(call: WithdrawWronglySentEtherCall) {
    this._call = call;
  }
}

export class WithdrawWronglySentTokenCall extends ethereum.Call {
  get inputs(): WithdrawWronglySentTokenCall__Inputs {
    return new WithdrawWronglySentTokenCall__Inputs(this);
  }

  get outputs(): WithdrawWronglySentTokenCall__Outputs {
    return new WithdrawWronglySentTokenCall__Outputs(this);
  }
}

export class WithdrawWronglySentTokenCall__Inputs {
  _call: WithdrawWronglySentTokenCall;

  constructor(call: WithdrawWronglySentTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawWronglySentTokenCall__Outputs {
  _call: WithdrawWronglySentTokenCall;

  constructor(call: WithdrawWronglySentTokenCall) {
    this._call = call;
  }
}
